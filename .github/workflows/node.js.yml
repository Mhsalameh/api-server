# # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# # For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# name: Node.js CI

# on:
#   push:
#     branches: [ main,dev ]
#   pull_request:
#     branches: [ main,dev ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: [12.x, 14.x, 16.x]
#         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

#     steps:
#     - uses: actions/checkout@v3
#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v2
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'
#     - run: npm ci
#     - run: npm run build --if-present
#     - run: npm test
    
#     - name: login to docker hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}

#     - name: Build and push docker image
#       uses: docker/build-push-action@v3
#       with:
#         context: .
#         push: true
#         tags: mhsalameh/apiserver:${{ github.sha }}
  
#   deploy:

#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v3

#     - name: 'Authenticate to google cloud'
#       uses: 'google-github-actions/auth@v0'
#       with:
#         credentials_json: ${{ secrets.GSERVICE_KEY }}
#     - name: check gcloud
#       run: gcloud info

#     - name: compute-ssh
#       uses: 'google-github-actions/ssh-compute@v0'
#       with:
#         instance_name: githubactions
#         zone: us-west4-b
#         ssh_private_key: ${{ secrets.GCLOUD_SSH_KEY }} 
#         user: mohsalameh1
#         command: |-
#           docker run -d --name psql --network task_db -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=api -d postgres 
#           docker run -d --name api --network task_db -p 3000:3000 -e DATABASE_URL=postgresql://postgres:postgres@psql:5432/api -e PORT=3000 mhsalameh/apiserver
#           docker network connect bridge api
    
#     - name: 
#       run: |-
#         echo ${{ steps.compute-ssh.outputs.stdout }}
#         echo ${{ steps.compute-ssh.outputs.stderr }}

name: shredtime api

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh                                                       # Creating the ssh directory for the runner
          echo "$SSH_KEY" > ~/.ssh/production.key                               # Creating the file that holds the ssh key for user on the production server
          chmod 600 ~/.ssh/production.key                                       # Giving the right permissions for the key file
          cat >>~/.ssh/config <<END
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/production.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{secrets.SSH_DEPLOYMENT_KEY }}
          SSH_HOST: ${{secrets.SHREDTIME_API_IP }}
  
      - name: ssh to machine & pull latest changes from master branch and reload pm2
        run: |
          ssh -tty production << 'EOF'
          export WORK_DIR="/home/${{ secrets.SSH_USER }}/api-server"
          export CORS_ORIGIN=  '*'
          export SERVER_PORT=  3000
          export NODE_ENV= production
          export SHREDTIME_DB_USERNAME= $SHREDTIME_DB_USERNAME
          export SHREDTIME_DB_PASSWORD= $SHREDTIME_DB_PASSWORD
          export SHREDTIME_DB_PORT= $SHREDTIME_DB_PORT
          export SHREDTIME_DB_HOST= $SHREDTIME_DB_HOST
          export SHREDTIME_DB_DATABASE= $SHREDTIME_DB_DATABASE
          export PASSWORD_SALT_ROUNDS= $PASSWORD_SALT_ROUNDS
          export ACCESS_TOKEN_EXPIRY= $ACCESS_TOKEN_EXPIRY
          export ACCESS_TOKEN_SECRET= $ACCESS_TOKEN_SECRET
          echo "SERVER_PORT:          $SERVER_PORT"
          echo "WORK_DIR:             $WORK_DIR"
          cd $WORK_DIR
          git pull origin main
          rm -rf node_modules
          npm install
          pm2 reload all
          exit 0
          EOF
        env: 
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_DEPLOYMENT_KEY: ${{ secrets.SSH_DEPLOYMENT_KEY }}
          SHREDTIME_API_IP: ${{ secrets.SHREDTIME_API_IP }}
          CORS_ORIGIN: '*'
          SERVER_PORT: '3000'
          NODE_ENV: 'production'
          SHREDTIME_DB_USERNAME: ${{ secrets.SHREDTIME_DB_USERNAME }}
          SHREDTIME_DB_PASSWORD: ${{ secrets.SHREDTIME_DB_PASSWORD }}
          SHREDTIME_DB_PORT: ${{ secrets.SHREDTIME_DB_PORT }}
          SHREDTIME_DB_HOST: ${{ secrets.SHREDTIME_DB_HOST }}
          SHREDTIME_DB_DATABASE: ${{ secrets.SHREDTIME_DB_DATABASE }}
          PASSWORD_SALT_ROUNDS: ${{ secrets.PASSWORD_SALT_ROUNDS }}
          ACCESS_TOKEN_EXPIRY: ${{ secrets.ACCESS_TOKEN_EXPIRY }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}